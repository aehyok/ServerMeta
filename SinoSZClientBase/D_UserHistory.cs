//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SinoSZClientBase
{
        using System;
        using System.Data;
        using System.Xml;
        using System.Runtime.Serialization;


        [Serializable()]
        [System.ComponentModel.DesignerCategoryAttribute("code")]
        [System.Diagnostics.DebuggerStepThrough()]
        [System.ComponentModel.ToolboxItem(true)]
        public class D_UserHistory : DataSet
        {

                private UserDataTable tableUser;

                public D_UserHistory()
                {
                        this.InitClass();
                        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                        this.Tables.CollectionChanged += schemaChangedHandler;
                        this.Relations.CollectionChanged += schemaChangedHandler;
                }

                protected D_UserHistory(SerializationInfo info, StreamingContext context)
                {
                        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
                        if ((strSchema != null))
                        {
                                DataSet ds = new DataSet();
                                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                                if ((ds.Tables["User"] != null))
                                {
                                        this.Tables.Add(new UserDataTable(ds.Tables["User"]));
                                }
                                this.DataSetName = ds.DataSetName;
                                this.Prefix = ds.Prefix;
                                this.Namespace = ds.Namespace;
                                this.Locale = ds.Locale;
                                this.CaseSensitive = ds.CaseSensitive;
                                this.EnforceConstraints = ds.EnforceConstraints;
                                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                                this.InitVars();
                        }
                        else
                        {
                                this.InitClass();
                        }
                        this.GetSerializationData(info, context);
                        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                        this.Tables.CollectionChanged += schemaChangedHandler;
                        this.Relations.CollectionChanged += schemaChangedHandler;
                }

                [System.ComponentModel.Browsable(false)]
                [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
                public UserDataTable User
                {
                        get
                        {
                                return this.tableUser;
                        }
                }

                public override DataSet Clone()
                {
                        D_UserHistory cln = ((D_UserHistory)(base.Clone()));
                        cln.InitVars();
                        return cln;
                }

                protected override bool ShouldSerializeTables()
                {
                        return false;
                }

                protected override bool ShouldSerializeRelations()
                {
                        return false;
                }

                protected override void ReadXmlSerializable(XmlReader reader)
                {
                        this.Reset();
                        DataSet ds = new DataSet();
                        ds.ReadXml(reader);
                        if ((ds.Tables["User"] != null))
                        {
                                this.Tables.Add(new UserDataTable(ds.Tables["User"]));
                        }
                        this.DataSetName = ds.DataSetName;
                        this.Prefix = ds.Prefix;
                        this.Namespace = ds.Namespace;
                        this.Locale = ds.Locale;
                        this.CaseSensitive = ds.CaseSensitive;
                        this.EnforceConstraints = ds.EnforceConstraints;
                        this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                        this.InitVars();
                }

                protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
                {
                        System.IO.MemoryStream stream = new System.IO.MemoryStream();
                        this.WriteXmlSchema(new XmlTextWriter(stream, null));
                        stream.Position = 0;
                        return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
                }

                internal void InitVars()
                {
                        this.tableUser = ((UserDataTable)(this.Tables["User"]));
                        if ((this.tableUser != null))
                        {
                                this.tableUser.InitVars();
                        }
                }

                private void InitClass()
                {
                        this.DataSetName = "D_UserHistory";
                        this.Prefix = "";
                        this.Namespace = "http://tempuri.org/D_UserHistory.xsd";
                        this.Locale = new System.Globalization.CultureInfo("en-US");
                        this.CaseSensitive = false;
                        this.EnforceConstraints = true;
                        this.tableUser = new UserDataTable();
                        this.Tables.Add(this.tableUser);
                }

                private bool ShouldSerializeUser()
                {
                        return false;
                }

                private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
                {
                        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
                        {
                                this.InitVars();
                        }
                }

                public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);

                [System.Diagnostics.DebuggerStepThrough()]
                public class UserDataTable : DataTable, System.Collections.IEnumerable
                {

                        private DataColumn columnUsername;

                        internal UserDataTable()
                                :
                                base("User")
                        {
                                this.InitClass();
                        }

                        internal UserDataTable(DataTable table)
                                :
                                base(table.TableName)
                        {
                                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                                {
                                        this.CaseSensitive = table.CaseSensitive;
                                }
                                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                                {
                                        this.Locale = table.Locale;
                                }
                                if ((table.Namespace != table.DataSet.Namespace))
                                {
                                        this.Namespace = table.Namespace;
                                }
                                this.Prefix = table.Prefix;
                                this.MinimumCapacity = table.MinimumCapacity;
                                this.DisplayExpression = table.DisplayExpression;
                        }

                        [System.ComponentModel.Browsable(false)]
                        public int Count
                        {
                                get
                                {
                                        return this.Rows.Count;
                                }
                        }

                        internal DataColumn UsernameColumn
                        {
                                get
                                {
                                        return this.columnUsername;
                                }
                        }

                        public UserRow this[int index]
                        {
                                get
                                {
                                        return ((UserRow)(this.Rows[index]));
                                }
                        }

                        public event UserRowChangeEventHandler UserRowChanged;

                        public event UserRowChangeEventHandler UserRowChanging;

                        public event UserRowChangeEventHandler UserRowDeleted;

                        public event UserRowChangeEventHandler UserRowDeleting;

                        public void AddUserRow(UserRow row)
                        {
                                this.Rows.Add(row);
                        }

                        public UserRow AddUserRow(string Username)
                        {
                                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                                rowUserRow.ItemArray = new object[] {
                        Username};
                                this.Rows.Add(rowUserRow);
                                return rowUserRow;
                        }

                        public System.Collections.IEnumerator GetEnumerator()
                        {
                                return this.Rows.GetEnumerator();
                        }

                        public override DataTable Clone()
                        {
                                UserDataTable cln = ((UserDataTable)(base.Clone()));
                                cln.InitVars();
                                return cln;
                        }

                        protected override DataTable CreateInstance()
                        {
                                return new UserDataTable();
                        }

                        internal void InitVars()
                        {
                                this.columnUsername = this.Columns["Username"];
                        }

                        private void InitClass()
                        {
                                this.columnUsername = new DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                                this.Columns.Add(this.columnUsername);
                                this.Constraints.Add(new UniqueConstraint("D_UserHistoryKey1", new DataColumn[] {
                                this.columnUsername}, false));
                                this.columnUsername.AllowDBNull = false;
                                this.columnUsername.Unique = true;
                        }

                        public UserRow NewUserRow()
                        {
                                return ((UserRow)(this.NewRow()));
                        }

                        protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
                        {
                                return new UserRow(builder);
                        }

                        protected override System.Type GetRowType()
                        {
                                return typeof(UserRow);
                        }

                        protected override void OnRowChanged(DataRowChangeEventArgs e)
                        {
                                base.OnRowChanged(e);
                                if ((this.UserRowChanged != null))
                                {
                                        this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                                }
                        }

                        protected override void OnRowChanging(DataRowChangeEventArgs e)
                        {
                                base.OnRowChanging(e);
                                if ((this.UserRowChanging != null))
                                {
                                        this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                                }
                        }

                        protected override void OnRowDeleted(DataRowChangeEventArgs e)
                        {
                                base.OnRowDeleted(e);
                                if ((this.UserRowDeleted != null))
                                {
                                        this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                                }
                        }

                        protected override void OnRowDeleting(DataRowChangeEventArgs e)
                        {
                                base.OnRowDeleting(e);
                                if ((this.UserRowDeleting != null))
                                {
                                        this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                                }
                        }

                        public void RemoveUserRow(UserRow row)
                        {
                                this.Rows.Remove(row);
                        }
                }

                [System.Diagnostics.DebuggerStepThrough()]
                public class UserRow : DataRow
                {

                        private UserDataTable tableUser;

                        internal UserRow(DataRowBuilder rb)
                                :
                                base(rb)
                        {
                                this.tableUser = ((UserDataTable)(this.Table));
                        }

                        public string Username
                        {
                                get
                                {
                                        return ((string)(this[this.tableUser.UsernameColumn]));
                                }
                                set
                                {
                                        this[this.tableUser.UsernameColumn] = value;
                                }
                        }
                }

                [System.Diagnostics.DebuggerStepThrough()]
                public class UserRowChangeEvent : EventArgs
                {

                        private UserRow eventRow;

                        private DataRowAction eventAction;

                        public UserRowChangeEvent(UserRow row, DataRowAction action)
                        {
                                this.eventRow = row;
                                this.eventAction = action;
                        }

                        public UserRow Row
                        {
                                get
                                {
                                        return this.eventRow;
                                }
                        }

                        public DataRowAction Action
                        {
                                get
                                {
                                        return this.eventAction;
                                }
                        }
                }
        }
}
