//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 
namespace SinoSZJS
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "SinoTRDWebServiceSoap", Namespace = "http://tempuri.org/")]
    public partial class SinoTRDWebService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback SaveClueAcceptInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetQueryModelMainTableOperationCompleted;

        private System.Threading.SendOrPostCallback GetQueryModelChildTableOperationCompleted;

        private System.Threading.SendOrPostCallback GetClueToDoListOperationCompleted;

        private System.Threading.SendOrPostCallback GetPostIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetAJIDAndAJMCByAJBHAndAJLXOperationCompleted;

        private System.Threading.SendOrPostCallback GetThreadPDFDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetPDFDocOperationCompleted;

        private System.Threading.SendOrPostCallback QueryAllEntryDataOperationCompleted;

        private System.Threading.SendOrPostCallback QueryAllThreadDataOperationCompleted;

        private System.Threading.SendOrPostCallback QueryAllPassengerDataOperationCompleted;

        private System.Threading.SendOrPostCallback QueryUserSimpleDataOperationCompleted;

        /// <remarks/>
        public SinoTRDWebService()
        {
            this.Url = "http://localhost:68/SinoTRDWebService.asmx";
        }

        /// <remarks/>
        public event SaveClueAcceptInfoCompletedEventHandler SaveClueAcceptInfoCompleted;

        /// <remarks/>
        public event GetQueryModelMainTableCompletedEventHandler GetQueryModelMainTableCompleted;

        /// <remarks/>
        public event GetQueryModelChildTableCompletedEventHandler GetQueryModelChildTableCompleted;

        /// <remarks/>
        public event GetClueToDoListCompletedEventHandler GetClueToDoListCompleted;

        /// <remarks/>
        public event GetPostIDCompletedEventHandler GetPostIDCompleted;

        /// <remarks/>
        public event GetAJIDAndAJMCByAJBHAndAJLXCompletedEventHandler GetAJIDAndAJMCByAJBHAndAJLXCompleted;

        /// <remarks/>
        public event GetThreadPDFDataCompletedEventHandler GetThreadPDFDataCompleted;

        /// <remarks/>
        public event GetPDFDocCompletedEventHandler GetPDFDocCompleted;

        /// <remarks/>
        public event QueryAllEntryDataCompletedEventHandler QueryAllEntryDataCompleted;

        /// <remarks/>
        public event QueryAllThreadDataCompletedEventHandler QueryAllThreadDataCompleted;

        /// <remarks/>
        public event QueryAllPassengerDataCompletedEventHandler QueryAllPassengerDataCompleted;

        /// <remarks/>
        public event QueryUserSimpleDataCompletedEventHandler QueryUserSimpleDataCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveClueAcceptInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveClueAcceptInfo(string xsid, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] data)
        {
            object[] results = this.Invoke("SaveClueAcceptInfo", new object[] {
                        xsid,
                        data});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSaveClueAcceptInfo(string xsid, byte[] data, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SaveClueAcceptInfo", new object[] {
                        xsid,
                        data}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSaveClueAcceptInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SaveClueAcceptInfoAsync(string xsid, byte[] data)
        {
            this.SaveClueAcceptInfoAsync(xsid, data, null);
        }

        /// <remarks/>
        public void SaveClueAcceptInfoAsync(string xsid, byte[] data, object userState)
        {
            if ((this.SaveClueAcceptInfoOperationCompleted == null))
            {
                this.SaveClueAcceptInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveClueAcceptInfoOperationCompleted);
            }
            this.InvokeAsync("SaveClueAcceptInfo", new object[] {
                        xsid,
                        data}, this.SaveClueAcceptInfoOperationCompleted, userState);
        }

        private void OnSaveClueAcceptInfoOperationCompleted(object arg)
        {
            if ((this.SaveClueAcceptInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveClueAcceptInfoCompleted(this, new SaveClueAcceptInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryModelMainTable", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetQueryModelMainTable(string modelName, string xsid, string guideLineID)
        {
            object[] results = this.Invoke("GetQueryModelMainTable", new object[] {
                        modelName,
                        xsid,
                        guideLineID});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQueryModelMainTable(string modelName, string xsid, string guideLineID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQueryModelMainTable", new object[] {
                        modelName,
                        xsid,
                        guideLineID}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetQueryModelMainTable(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetQueryModelMainTableAsync(string modelName, string xsid, string guideLineID)
        {
            this.GetQueryModelMainTableAsync(modelName, xsid, guideLineID, null);
        }

        /// <remarks/>
        public void GetQueryModelMainTableAsync(string modelName, string xsid, string guideLineID, object userState)
        {
            if ((this.GetQueryModelMainTableOperationCompleted == null))
            {
                this.GetQueryModelMainTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryModelMainTableOperationCompleted);
            }
            this.InvokeAsync("GetQueryModelMainTable", new object[] {
                        modelName,
                        xsid,
                        guideLineID}, this.GetQueryModelMainTableOperationCompleted, userState);
        }

        private void OnGetQueryModelMainTableOperationCompleted(object arg)
        {
            if ((this.GetQueryModelMainTableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryModelMainTableCompleted(this, new GetQueryModelMainTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryModelChildTable", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetQueryModelChildTable(string modelName, string childTableName, string xsid)
        {
            object[] results = this.Invoke("GetQueryModelChildTable", new object[] {
                        modelName,
                        childTableName,
                        xsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQueryModelChildTable(string modelName, string childTableName, string xsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQueryModelChildTable", new object[] {
                        modelName,
                        childTableName,
                        xsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetQueryModelChildTable(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetQueryModelChildTableAsync(string modelName, string childTableName, string xsid)
        {
            this.GetQueryModelChildTableAsync(modelName, childTableName, xsid, null);
        }

        /// <remarks/>
        public void GetQueryModelChildTableAsync(string modelName, string childTableName, string xsid, object userState)
        {
            if ((this.GetQueryModelChildTableOperationCompleted == null))
            {
                this.GetQueryModelChildTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryModelChildTableOperationCompleted);
            }
            this.InvokeAsync("GetQueryModelChildTable", new object[] {
                        modelName,
                        childTableName,
                        xsid}, this.GetQueryModelChildTableOperationCompleted, userState);
        }

        private void OnGetQueryModelChildTableOperationCompleted(object arg)
        {
            if ((this.GetQueryModelChildTableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryModelChildTableCompleted(this, new GetQueryModelChildTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClueToDoList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClueToDoList(string AppName, string Token)
        {
            object[] results = this.Invoke("GetClueToDoList", new object[] {
                        AppName,
                        Token});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetClueToDoList(string AppName, string Token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetClueToDoList", new object[] {
                        AppName,
                        Token}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetClueToDoList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetClueToDoListAsync(string AppName, string Token)
        {
            this.GetClueToDoListAsync(AppName, Token, null);
        }

        /// <remarks/>
        public void GetClueToDoListAsync(string AppName, string Token, object userState)
        {
            if ((this.GetClueToDoListOperationCompleted == null))
            {
                this.GetClueToDoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClueToDoListOperationCompleted);
            }
            this.InvokeAsync("GetClueToDoList", new object[] {
                        AppName,
                        Token}, this.GetClueToDoListOperationCompleted, userState);
        }

        private void OnGetClueToDoListOperationCompleted(object arg)
        {
            if ((this.GetClueToDoListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClueToDoListCompleted(this, new GetClueToDoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPostID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPostID(string menuID, string token)
        {
            object[] results = this.Invoke("GetPostID", new object[] {
                        menuID,
                        token});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPostID(string menuID, string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPostID", new object[] {
                        menuID,
                        token}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetPostID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPostIDAsync(string menuID, string token)
        {
            this.GetPostIDAsync(menuID, token, null);
        }

        /// <remarks/>
        public void GetPostIDAsync(string menuID, string token, object userState)
        {
            if ((this.GetPostIDOperationCompleted == null))
            {
                this.GetPostIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostIDOperationCompleted);
            }
            this.InvokeAsync("GetPostID", new object[] {
                        menuID,
                        token}, this.GetPostIDOperationCompleted, userState);
        }

        private void OnGetPostIDOperationCompleted(object arg)
        {
            if ((this.GetPostIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostIDCompleted(this, new GetPostIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAJIDAndAJMCByAJBHAndAJLX", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAJIDAndAJMCByAJBHAndAJLX(string AJBH, string AJLX, string Token)
        {
            object[] results = this.Invoke("GetAJIDAndAJMCByAJBHAndAJLX", new object[] {
                        AJBH,
                        AJLX,
                        Token});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAJIDAndAJMCByAJBHAndAJLX(string AJBH, string AJLX, string Token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAJIDAndAJMCByAJBHAndAJLX", new object[] {
                        AJBH,
                        AJLX,
                        Token}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAJIDAndAJMCByAJBHAndAJLX(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAJIDAndAJMCByAJBHAndAJLXAsync(string AJBH, string AJLX, string Token)
        {
            this.GetAJIDAndAJMCByAJBHAndAJLXAsync(AJBH, AJLX, Token, null);
        }

        /// <remarks/>
        public void GetAJIDAndAJMCByAJBHAndAJLXAsync(string AJBH, string AJLX, string Token, object userState)
        {
            if ((this.GetAJIDAndAJMCByAJBHAndAJLXOperationCompleted == null))
            {
                this.GetAJIDAndAJMCByAJBHAndAJLXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAJIDAndAJMCByAJBHAndAJLXOperationCompleted);
            }
            this.InvokeAsync("GetAJIDAndAJMCByAJBHAndAJLX", new object[] {
                        AJBH,
                        AJLX,
                        Token}, this.GetAJIDAndAJMCByAJBHAndAJLXOperationCompleted, userState);
        }

        private void OnGetAJIDAndAJMCByAJBHAndAJLXOperationCompleted(object arg)
        {
            if ((this.GetAJIDAndAJMCByAJBHAndAJLXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAJIDAndAJMCByAJBHAndAJLXCompleted(this, new GetAJIDAndAJMCByAJBHAndAJLXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetThreadPDFData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetThreadPDFData(string xsid)
        {
            object[] results = this.Invoke("GetThreadPDFData", new object[] {
                        xsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetThreadPDFData(string xsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetThreadPDFData", new object[] {
                        xsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetThreadPDFData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetThreadPDFDataAsync(string xsid)
        {
            this.GetThreadPDFDataAsync(xsid, null);
        }

        /// <remarks/>
        public void GetThreadPDFDataAsync(string xsid, object userState)
        {
            if ((this.GetThreadPDFDataOperationCompleted == null))
            {
                this.GetThreadPDFDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThreadPDFDataOperationCompleted);
            }
            this.InvokeAsync("GetThreadPDFData", new object[] {
                        xsid}, this.GetThreadPDFDataOperationCompleted, userState);
        }

        private void OnGetThreadPDFDataOperationCompleted(object arg)
        {
            if ((this.GetThreadPDFDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThreadPDFDataCompleted(this, new GetThreadPDFDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPDFDoc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetPDFDoc(string wsid)
        {
            object[] results = this.Invoke("GetPDFDoc", new object[] {
                        wsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPDFDoc(string wsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPDFDoc", new object[] {
                        wsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetPDFDoc(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetPDFDocAsync(string wsid)
        {
            this.GetPDFDocAsync(wsid, null);
        }

        /// <remarks/>
        public void GetPDFDocAsync(string wsid, object userState)
        {
            if ((this.GetPDFDocOperationCompleted == null))
            {
                this.GetPDFDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPDFDocOperationCompleted);
            }
            this.InvokeAsync("GetPDFDoc", new object[] {
                        wsid}, this.GetPDFDocOperationCompleted, userState);
        }

        private void OnGetPDFDocOperationCompleted(object arg)
        {
            if ((this.GetPDFDocCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPDFDocCompleted(this, new GetPDFDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryAllEntryData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] QueryAllEntryData(string xsid)
        {
            object[] results = this.Invoke("QueryAllEntryData", new object[] {
                        xsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginQueryAllEntryData(string xsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("QueryAllEntryData", new object[] {
                        xsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndQueryAllEntryData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void QueryAllEntryDataAsync(string xsid)
        {
            this.QueryAllEntryDataAsync(xsid, null);
        }

        /// <remarks/>
        public void QueryAllEntryDataAsync(string xsid, object userState)
        {
            if ((this.QueryAllEntryDataOperationCompleted == null))
            {
                this.QueryAllEntryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAllEntryDataOperationCompleted);
            }
            this.InvokeAsync("QueryAllEntryData", new object[] {
                        xsid}, this.QueryAllEntryDataOperationCompleted, userState);
        }

        private void OnQueryAllEntryDataOperationCompleted(object arg)
        {
            if ((this.QueryAllEntryDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAllEntryDataCompleted(this, new QueryAllEntryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryAllThreadData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] QueryAllThreadData(string xsid)
        {
            object[] results = this.Invoke("QueryAllThreadData", new object[] {
                        xsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginQueryAllThreadData(string xsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("QueryAllThreadData", new object[] {
                        xsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndQueryAllThreadData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void QueryAllThreadDataAsync(string xsid)
        {
            this.QueryAllThreadDataAsync(xsid, null);
        }

        /// <remarks/>
        public void QueryAllThreadDataAsync(string xsid, object userState)
        {
            if ((this.QueryAllThreadDataOperationCompleted == null))
            {
                this.QueryAllThreadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAllThreadDataOperationCompleted);
            }
            this.InvokeAsync("QueryAllThreadData", new object[] {
                        xsid}, this.QueryAllThreadDataOperationCompleted, userState);
        }

        private void OnQueryAllThreadDataOperationCompleted(object arg)
        {
            if ((this.QueryAllThreadDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAllThreadDataCompleted(this, new QueryAllThreadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryAllPassengerData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] QueryAllPassengerData(string xsid)
        {
            object[] results = this.Invoke("QueryAllPassengerData", new object[] {
                        xsid});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginQueryAllPassengerData(string xsid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("QueryAllPassengerData", new object[] {
                        xsid}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndQueryAllPassengerData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void QueryAllPassengerDataAsync(string xsid)
        {
            this.QueryAllPassengerDataAsync(xsid, null);
        }

        /// <remarks/>
        public void QueryAllPassengerDataAsync(string xsid, object userState)
        {
            if ((this.QueryAllPassengerDataOperationCompleted == null))
            {
                this.QueryAllPassengerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAllPassengerDataOperationCompleted);
            }
            this.InvokeAsync("QueryAllPassengerData", new object[] {
                        xsid}, this.QueryAllPassengerDataOperationCompleted, userState);
        }

        private void OnQueryAllPassengerDataOperationCompleted(object arg)
        {
            if ((this.QueryAllPassengerDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAllPassengerDataCompleted(this, new QueryAllPassengerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryUserSimpleData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryUserSimpleData(string LogonName)
        {
            object[] results = this.Invoke("QueryUserSimpleData", new object[] {
                        LogonName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginQueryUserSimpleData(string LogonName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("QueryUserSimpleData", new object[] {
                        LogonName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndQueryUserSimpleData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void QueryUserSimpleDataAsync(string LogonName)
        {
            this.QueryUserSimpleDataAsync(LogonName, null);
        }

        /// <remarks/>
        public void QueryUserSimpleDataAsync(string LogonName, object userState)
        {
            if ((this.QueryUserSimpleDataOperationCompleted == null))
            {
                this.QueryUserSimpleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryUserSimpleDataOperationCompleted);
            }
            this.InvokeAsync("QueryUserSimpleData", new object[] {
                        LogonName}, this.QueryUserSimpleDataOperationCompleted, userState);
        }

        private void OnQueryUserSimpleDataOperationCompleted(object arg)
        {
            if ((this.QueryUserSimpleDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryUserSimpleDataCompleted(this, new QueryUserSimpleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SaveClueAcceptInfoCompletedEventHandler(object sender, SaveClueAcceptInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveClueAcceptInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveClueAcceptInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQueryModelMainTableCompletedEventHandler(object sender, GetQueryModelMainTableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryModelMainTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQueryModelMainTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQueryModelChildTableCompletedEventHandler(object sender, GetQueryModelChildTableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryModelChildTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQueryModelChildTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetClueToDoListCompletedEventHandler(object sender, GetClueToDoListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClueToDoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetClueToDoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPostIDCompletedEventHandler(object sender, GetPostIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPostIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAJIDAndAJMCByAJBHAndAJLXCompletedEventHandler(object sender, GetAJIDAndAJMCByAJBHAndAJLXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAJIDAndAJMCByAJBHAndAJLXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAJIDAndAJMCByAJBHAndAJLXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetThreadPDFDataCompletedEventHandler(object sender, GetThreadPDFDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThreadPDFDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetThreadPDFDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPDFDocCompletedEventHandler(object sender, GetPDFDocCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPDFDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPDFDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void QueryAllEntryDataCompletedEventHandler(object sender, QueryAllEntryDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAllEntryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal QueryAllEntryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void QueryAllThreadDataCompletedEventHandler(object sender, QueryAllThreadDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAllThreadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal QueryAllThreadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void QueryAllPassengerDataCompletedEventHandler(object sender, QueryAllPassengerDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAllPassengerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal QueryAllPassengerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void QueryUserSimpleDataCompletedEventHandler(object sender, QueryUserSimpleDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryUserSimpleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal QueryUserSimpleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
