//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

/// <remarks/>
[DebuggerStepThrough()]
[DesignerCategory("code")]
[WebServiceBinding(Name="ReportingServiceSoap", Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(DataSourceDefinitionOrReference))]
[XmlInclude(typeof(ExpirationDefinition))]
[XmlInclude(typeof(RecurrencePattern))]
[XmlInclude(typeof(ScheduleDefinitionOrReference))]
public class ReportingService : SoapHttpClientProtocol {
    
    public ServerInfoHeader ServerInfoHeaderValue;
    
    public BatchHeader BatchHeaderValue;
    
    public ItemNamespaceHeader ItemNamespaceHeaderValue;
    
    public SessionHeader SessionHeaderValue;
    
    /// <remarks/>
    public ReportingService() {
        this.Url = "http://localhost/ReportServer/ReportService.asmx";
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSe" +
"cureMethods", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public string[] ListSecureMethods() {
        object[] results = this.Invoke("ListSecureMethods", new object[0]);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSecureMethods(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSecureMethods", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndListSecureMethods(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Batch", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("BatchID")]
    public string CreateBatch() {
        object[] results = this.Invoke("CreateBatch", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateBatch(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateBatch", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateBatch(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
"Batch", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CancelBatch() {
        this.Invoke("CancelBatch", new object[0]);
    }
    
    /// <remarks/>
    public IAsyncResult BeginCancelBatch(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelBatch", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelBatch(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Execut" +
"eBatch", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void ExecuteBatch() {
        this.Invoke("ExecuteBatch", new object[0]);
    }
    
    /// <remarks/>
    public IAsyncResult BeginExecuteBatch(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExecuteBatch", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExecuteBatch(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
"temProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Values")]
    public Property[] GetSystemProperties(Property[] Properties) {
        object[] results = this.Invoke("GetSystemProperties", new object[] {
                    Properties});
        return ((Property[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetSystemProperties(Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemProperties", new object[] {
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public Property[] EndGetSystemProperties(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Property[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
"temProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetSystemProperties(Property[] Properties) {
        this.Invoke("SetSystemProperties", new object[] {
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetSystemProperties(Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemProperties", new object[] {
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetSystemProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
"Item", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DeleteItem(string Item) {
        this.Invoke("DeleteItem", new object[] {
                    Item});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDeleteItem(string Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteItem", new object[] {
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteItem(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/MoveIt" +
"em", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void MoveItem(string Item, string Target) {
        this.Invoke("MoveItem", new object[] {
                    Item,
                    Target});
    }
    
    /// <remarks/>
    public IAsyncResult BeginMoveItem(string Item, string Target, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MoveItem", new object[] {
                    Item,
                    Target}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMoveItem(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListCh" +
"ildren", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("CatalogItems")]
    public CatalogItem[] ListChildren(string Item, bool Recursive) {
        object[] results = this.Invoke("ListChildren", new object[] {
                    Item,
                    Recursive});
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListChildren(string Item, bool Recursive, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListChildren", new object[] {
                    Item,
                    Recursive}, callback, asyncState);
    }
    
    /// <remarks/>
    public CatalogItem[] EndListChildren(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("ItemNamespaceHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPro" +
"perties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Values")]
    public Property[] GetProperties(string Item, Property[] Properties) {
        object[] results = this.Invoke("GetProperties", new object[] {
                    Item,
                    Properties});
        return ((Property[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetProperties(string Item, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProperties", new object[] {
                    Item,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public Property[] EndGetProperties(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Property[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPro" +
"perties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetProperties(string Item, Property[] Properties) {
        this.Invoke("SetProperties", new object[] {
                    Item,
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetProperties(string Item, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetProperties", new object[] {
                    Item,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetIte" +
"mType", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Type")]
    public ItemTypeEnum GetItemType(string Item) {
        object[] results = this.Invoke("GetItemType", new object[] {
                    Item});
        return ((ItemTypeEnum)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetItemType(string Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetItemType", new object[] {
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public ItemTypeEnum EndGetItemType(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ItemTypeEnum)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Folder", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CreateFolder(string Folder, string Parent, Property[] Properties) {
        this.Invoke("CreateFolder", new object[] {
                    Folder,
                    Parent,
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateFolder(string Folder, string Parent, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateFolder", new object[] {
                    Folder,
                    Parent,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateFolder(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Report", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Warnings")]
    public Warning[] CreateReport(string Report, string Parent, bool Overwrite, [XmlElement(DataType="base64Binary")] Byte[] Definition, Property[] Properties) {
        object[] results = this.Invoke("CreateReport", new object[] {
                    Report,
                    Parent,
                    Overwrite,
                    Definition,
                    Properties});
        return ((Warning[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateReport(string Report, string Parent, bool Overwrite, Byte[] Definition, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateReport", new object[] {
                    Report,
                    Parent,
                    Overwrite,
                    Definition,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public Warning[] EndCreateReport(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Warning[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortDefinition", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Definition", DataType="base64Binary")]
    public Byte[] GetReportDefinition(string Report) {
        object[] results = this.Invoke("GetReportDefinition", new object[] {
                    Report});
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportDefinition(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportDefinition", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public Byte[] EndGetReportDefinition(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortDefinition", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Warnings")]
    public Warning[] SetReportDefinition(string Report, [XmlElement(DataType="base64Binary")] Byte[] Definition) {
        object[] results = this.Invoke("SetReportDefinition", new object[] {
                    Report,
                    Definition});
        return ((Warning[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportDefinition(string Report, Byte[] Definition, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportDefinition", new object[] {
                    Report,
                    Definition}, callback, asyncState);
    }
    
    /// <remarks/>
    public Warning[] EndSetReportDefinition(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Warning[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Resource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CreateResource(string Resource, string Parent, bool Overwrite, [XmlElement(DataType="base64Binary")] Byte[] Contents, string MimeType, Property[] Properties) {
        this.Invoke("CreateResource", new object[] {
                    Resource,
                    Parent,
                    Overwrite,
                    Contents,
                    MimeType,
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateResource(string Resource, string Parent, bool Overwrite, Byte[] Contents, string MimeType, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateResource", new object[] {
                    Resource,
                    Parent,
                    Overwrite,
                    Contents,
                    MimeType,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateResource(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRes" +
"ourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetResourceContents(string Resource, [XmlElement(DataType="base64Binary")] Byte[] Contents, string MimeType) {
        this.Invoke("SetResourceContents", new object[] {
                    Resource,
                    Contents,
                    MimeType});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetResourceContents(string Resource, Byte[] Contents, string MimeType, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetResourceContents", new object[] {
                    Resource,
                    Contents,
                    MimeType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetResourceContents(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRes" +
"ourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Contents", DataType="base64Binary")]
    public Byte[] GetResourceContents(string Resource, out string MimeType) {
        object[] results = this.Invoke("GetResourceContents", new object[] {
                    Resource});
        MimeType = ((string)(results[1]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetResourceContents(string Resource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourceContents", new object[] {
                    Resource}, callback, asyncState);
    }
    
    /// <remarks/>
    public Byte[] EndGetResourceContents(IAsyncResult asyncResult, out string MimeType) {
        object[] results = this.EndInvoke(asyncResult);
        MimeType = ((string)(results[1]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortParameters", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Parameters")]
    public ReportParameter[] GetReportParameters(string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials) {
        object[] results = this.Invoke("GetReportParameters", new object[] {
                    Report,
                    HistoryID,
                    ForRendering,
                    Values,
                    Credentials});
        return ((ReportParameter[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportParameters(string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportParameters", new object[] {
                    Report,
                    HistoryID,
                    ForRendering,
                    Values,
                    Credentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public ReportParameter[] EndGetReportParameters(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ReportParameter[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortParameters", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetReportParameters(string Report, ReportParameter[] Parameters) {
        this.Invoke("SetReportParameters", new object[] {
                    Report,
                    Parameters});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportParameters(string Report, ReportParameter[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportParameters", new object[] {
                    Report,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetReportParameters(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"LinkedReport", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CreateLinkedReport(string Report, string Parent, string Link, Property[] Properties) {
        this.Invoke("CreateLinkedReport", new object[] {
                    Report,
                    Parent,
                    Link,
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateLinkedReport(string Report, string Parent, string Link, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateLinkedReport", new object[] {
                    Report,
                    Parent,
                    Link,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateLinkedReport(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortLink", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Link")]
    public string GetReportLink(string Report) {
        object[] results = this.Invoke("GetReportLink", new object[] {
                    Report});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportLink(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportLink", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetReportLink(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortLink", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetReportLink(string Report, string Link) {
        this.Invoke("SetReportLink", new object[] {
                    Report,
                    Link});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportLink(string Report, string Link, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportLink", new object[] {
                    Report,
                    Link}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetReportLink(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListLi" +
"nkedReports", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListLinkedReports(string Report) {
        object[] results = this.Invoke("ListLinkedReports", new object[] {
                    Report});
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListLinkedReports(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListLinkedReports", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public CatalogItem[] EndListLinkedReports(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("SessionHeaderValue", Direction=SoapHeaderDirection.InOut)]
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
"", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType="base64Binary")]
    public Byte[] Render(string Report, string Format, string HistoryID, string DeviceInfo, ParameterValue[] Parameters, DataSourceCredentials[] Credentials, string ShowHideToggle, out string Encoding, out string MimeType, out ParameterValue[] ParametersUsed, out Warning[] Warnings, out string[] StreamIds) {
        object[] results = this.Invoke("Render", new object[] {
                    Report,
                    Format,
                    HistoryID,
                    DeviceInfo,
                    Parameters,
                    Credentials,
                    ShowHideToggle});
        Encoding = ((string)(results[1]));
        MimeType = ((string)(results[2]));
        ParametersUsed = ((ParameterValue[])(results[3]));
        Warnings = ((Warning[])(results[4]));
        StreamIds = ((string[])(results[5]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginRender(string Report, string Format, string HistoryID, string DeviceInfo, ParameterValue[] Parameters, DataSourceCredentials[] Credentials, string ShowHideToggle, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Render", new object[] {
                    Report,
                    Format,
                    HistoryID,
                    DeviceInfo,
                    Parameters,
                    Credentials,
                    ShowHideToggle}, callback, asyncState);
    }
    
    /// <remarks/>
    public Byte[] EndRender(IAsyncResult asyncResult, out string Encoding, out string MimeType, out ParameterValue[] ParametersUsed, out Warning[] Warnings, out string[] StreamIds) {
        object[] results = this.EndInvoke(asyncResult);
        Encoding = ((string)(results[1]));
        MimeType = ((string)(results[2]));
        ParametersUsed = ((ParameterValue[])(results[3]));
        Warnings = ((Warning[])(results[4]));
        StreamIds = ((string[])(results[5]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("SessionHeaderValue", Direction=SoapHeaderDirection.InOut)]
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
"Stream", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType="base64Binary")]
    public Byte[] RenderStream(string Report, string Format, string StreamID, string HistoryID, string DeviceInfo, ParameterValue[] Parameters, out string Encoding, out string MimeType) {
        object[] results = this.Invoke("RenderStream", new object[] {
                    Report,
                    Format,
                    StreamID,
                    HistoryID,
                    DeviceInfo,
                    Parameters});
        Encoding = ((string)(results[1]));
        MimeType = ((string)(results[2]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginRenderStream(string Report, string Format, string StreamID, string HistoryID, string DeviceInfo, ParameterValue[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RenderStream", new object[] {
                    Report,
                    Format,
                    StreamID,
                    HistoryID,
                    DeviceInfo,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public Byte[] EndRenderStream(IAsyncResult asyncResult, out string Encoding, out string MimeType) {
        object[] results = this.EndInvoke(asyncResult);
        Encoding = ((string)(results[1]));
        MimeType = ((string)(results[2]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRen" +
"derResource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType="base64Binary")]
    public Byte[] GetRenderResource(string Format, string DeviceInfo, out string MimeType) {
        object[] results = this.Invoke("GetRenderResource", new object[] {
                    Format,
                    DeviceInfo});
        MimeType = ((string)(results[1]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetRenderResource(string Format, string DeviceInfo, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRenderResource", new object[] {
                    Format,
                    DeviceInfo}, callback, asyncState);
    }
    
    /// <remarks/>
    public Byte[] EndGetRenderResource(IAsyncResult asyncResult, out string MimeType) {
        object[] results = this.EndInvoke(asyncResult);
        MimeType = ((string)(results[1]));
        return ((Byte[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetExe" +
"cutionOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetExecutionOptions(string Report, ExecutionSettingEnum ExecutionSetting, [XmlElement("NoSchedule", typeof(NoSchedule))] [XmlElement("ScheduleDefinition", typeof(ScheduleDefinition))] [XmlElement("ScheduleReference", typeof(ScheduleReference))] ScheduleDefinitionOrReference Item) {
        this.Invoke("SetExecutionOptions", new object[] {
                    Report,
                    ExecutionSetting,
                    Item});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetExecutionOptions(string Report, ExecutionSettingEnum ExecutionSetting, ScheduleDefinitionOrReference Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetExecutionOptions", new object[] {
                    Report,
                    ExecutionSetting,
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetExecutionOptions(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExe" +
"cutionOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("ExecutionSetting")]
    public ExecutionSettingEnum GetExecutionOptions(string Report, [XmlElement("NoSchedule", typeof(NoSchedule))] [XmlElement("ScheduleDefinition", typeof(ScheduleDefinition))] [XmlElement("ScheduleReference", typeof(ScheduleReference))] out ScheduleDefinitionOrReference Item) {
        object[] results = this.Invoke("GetExecutionOptions", new object[] {
                    Report});
        Item = ((ScheduleDefinitionOrReference)(results[1]));
        return ((ExecutionSettingEnum)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetExecutionOptions(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetExecutionOptions", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public ExecutionSettingEnum EndGetExecutionOptions(IAsyncResult asyncResult, out ScheduleDefinitionOrReference Item) {
        object[] results = this.EndInvoke(asyncResult);
        Item = ((ScheduleDefinitionOrReference)(results[1]));
        return ((ExecutionSettingEnum)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetCac" +
"heOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetCacheOptions(string Report, bool CacheReport, [XmlElement("ScheduleExpiration", typeof(ScheduleExpiration))] [XmlElement("TimeExpiration", typeof(TimeExpiration))] ExpirationDefinition Item) {
        this.Invoke("SetCacheOptions", new object[] {
                    Report,
                    CacheReport,
                    Item});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetCacheOptions(string Report, bool CacheReport, ExpirationDefinition Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetCacheOptions", new object[] {
                    Report,
                    CacheReport,
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetCacheOptions(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetCac" +
"heOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("CacheReport")]
    public bool GetCacheOptions(string Report, [XmlElement("ScheduleExpiration", typeof(ScheduleExpiration))] [XmlElement("TimeExpiration", typeof(TimeExpiration))] out ExpirationDefinition Item) {
        object[] results = this.Invoke("GetCacheOptions", new object[] {
                    Report});
        Item = ((ExpirationDefinition)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetCacheOptions(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCacheOptions", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetCacheOptions(IAsyncResult asyncResult, out ExpirationDefinition Item) {
        object[] results = this.EndInvoke(asyncResult);
        Item = ((ExpirationDefinition)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Update" +
"ReportExecutionSnapshot", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void UpdateReportExecutionSnapshot(string Report) {
        this.Invoke("UpdateReportExecutionSnapshot", new object[] {
                    Report});
    }
    
    /// <remarks/>
    public IAsyncResult BeginUpdateReportExecutionSnapshot(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateReportExecutionSnapshot", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateReportExecutionSnapshot(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FlushC" +
"ache", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void FlushCache(string Report) {
        this.Invoke("FlushCache", new object[] {
                    Report});
    }
    
    /// <remarks/>
    public IAsyncResult BeginFlushCache(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlushCache", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFlushCache(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListJo" +
"bs", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Jobs")]
    public Job[] ListJobs() {
        object[] results = this.Invoke("ListJobs", new object[0]);
        return ((Job[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListJobs(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListJobs", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Job[] EndListJobs(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Job[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
"Job", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public bool CancelJob(string JobID) {
        object[] results = this.Invoke("CancelJob", new object[] {
                    JobID});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCancelJob(string JobID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelJob", new object[] {
                    JobID}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndCancelJob(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"DataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties) {
        this.Invoke("CreateDataSource", new object[] {
                    DataSource,
                    Parent,
                    Overwrite,
                    Definition,
                    Properties});
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateDataSource", new object[] {
                    DataSource,
                    Parent,
                    Overwrite,
                    Definition,
                    Properties}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateDataSource(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
"aSourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Definition")]
    public DataSourceDefinition GetDataSourceContents(string DataSource) {
        object[] results = this.Invoke("GetDataSourceContents", new object[] {
                    DataSource});
        return ((DataSourceDefinition)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetDataSourceContents(string DataSource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDataSourceContents", new object[] {
                    DataSource}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataSourceDefinition EndGetDataSourceContents(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DataSourceDefinition)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
"aSourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetDataSourceContents(string DataSource, DataSourceDefinition Definition) {
        this.Invoke("SetDataSourceContents", new object[] {
                    DataSource,
                    Definition});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetDataSourceContents(string DataSource, DataSourceDefinition Definition, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDataSourceContents", new object[] {
                    DataSource,
                    Definition}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetDataSourceContents(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Enable" +
"DataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void EnableDataSource(string DataSource) {
        this.Invoke("EnableDataSource", new object[] {
                    DataSource});
    }
    
    /// <remarks/>
    public IAsyncResult BeginEnableDataSource(string DataSource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("EnableDataSource", new object[] {
                    DataSource}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndEnableDataSource(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Disabl" +
"eDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DisableDataSource(string DataSource) {
        this.Invoke("DisableDataSource", new object[] {
                    DataSource});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDisableDataSource(string DataSource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisableDataSource", new object[] {
                    DataSource}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDisableDataSource(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
"portsUsingDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListReportsUsingDataSource(string DataSource) {
        object[] results = this.Invoke("ListReportsUsingDataSource", new object[] {
                    DataSource});
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListReportsUsingDataSource(string DataSource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListReportsUsingDataSource", new object[] {
                    DataSource}, callback, asyncState);
    }
    
    /// <remarks/>
    public CatalogItem[] EndListReportsUsingDataSource(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortDataSources", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetReportDataSources(string Report, DataSource[] DataSources) {
        this.Invoke("SetReportDataSources", new object[] {
                    Report,
                    DataSources});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportDataSources(string Report, DataSource[] DataSources, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportDataSources", new object[] {
                    Report,
                    DataSources}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetReportDataSources(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortDataSources", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("DataSources")]
    public DataSource[] GetReportDataSources(string Report) {
        object[] results = this.Invoke("GetReportDataSources", new object[] {
                    Report});
        return ((DataSource[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportDataSources(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportDataSources", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataSource[] EndGetReportDataSources(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DataSource[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortDataSourcePrompts", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("DataSourcePrompts")]
    public DataSourcePrompt[] GetReportDataSourcePrompts(string Report) {
        object[] results = this.Invoke("GetReportDataSourcePrompts", new object[] {
                    Report});
        return ((DataSourcePrompt[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportDataSourcePrompts(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportDataSourcePrompts", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataSourcePrompt[] EndGetReportDataSourcePrompts(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DataSourcePrompt[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"ReportHistorySnapshot", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("HistoryID")]
    public string CreateReportHistorySnapshot(string Report, out Warning[] Warnings) {
        object[] results = this.Invoke("CreateReportHistorySnapshot", new object[] {
                    Report});
        Warnings = ((Warning[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateReportHistorySnapshot(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateReportHistorySnapshot", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateReportHistorySnapshot(IAsyncResult asyncResult, out Warning[] Warnings) {
        object[] results = this.EndInvoke(asyncResult);
        Warnings = ((Warning[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortHistoryOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, [XmlElement("NoSchedule", typeof(NoSchedule))] [XmlElement("ScheduleDefinition", typeof(ScheduleDefinition))] [XmlElement("ScheduleReference", typeof(ScheduleReference))] ScheduleDefinitionOrReference Item) {
        this.Invoke("SetReportHistoryOptions", new object[] {
                    Report,
                    EnableManualSnapshotCreation,
                    KeepExecutionSnapshots,
                    Item});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportHistoryOptions", new object[] {
                    Report,
                    EnableManualSnapshotCreation,
                    KeepExecutionSnapshots,
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetReportHistoryOptions(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortHistoryOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("EnableManualSnapshotCreation")]
    public bool GetReportHistoryOptions(string Report, out bool KeepExecutionSnapshots, [XmlElement("NoSchedule", typeof(NoSchedule))] [XmlElement("ScheduleDefinition", typeof(ScheduleDefinition))] [XmlElement("ScheduleReference", typeof(ScheduleReference))] out ScheduleDefinitionOrReference Item) {
        object[] results = this.Invoke("GetReportHistoryOptions", new object[] {
                    Report});
        KeepExecutionSnapshots = ((bool)(results[1]));
        Item = ((ScheduleDefinitionOrReference)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportHistoryOptions(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportHistoryOptions", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetReportHistoryOptions(IAsyncResult asyncResult, out bool KeepExecutionSnapshots, out ScheduleDefinitionOrReference Item) {
        object[] results = this.EndInvoke(asyncResult);
        KeepExecutionSnapshots = ((bool)(results[1]));
        Item = ((ScheduleDefinitionOrReference)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
"ortHistoryLimit", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit) {
        this.Invoke("SetReportHistoryLimit", new object[] {
                    Report,
                    UseSystem,
                    HistoryLimit});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetReportHistoryLimit", new object[] {
                    Report,
                    UseSystem,
                    HistoryLimit}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetReportHistoryLimit(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
"ortHistoryLimit", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("HistoryLimit")]
    public int GetReportHistoryLimit(string Report, out bool IsSystem, out int SystemLimit) {
        object[] results = this.Invoke("GetReportHistoryLimit", new object[] {
                    Report});
        IsSystem = ((bool)(results[1]));
        SystemLimit = ((int)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetReportHistoryLimit(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReportHistoryLimit", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndGetReportHistoryLimit(IAsyncResult asyncResult, out bool IsSystem, out int SystemLimit) {
        object[] results = this.EndInvoke(asyncResult);
        IsSystem = ((bool)(results[1]));
        SystemLimit = ((int)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
"portHistory", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("ReportHistory")]
    public ReportHistorySnapshot[] ListReportHistory(string Report) {
        object[] results = this.Invoke("ListReportHistory", new object[] {
                    Report});
        return ((ReportHistorySnapshot[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListReportHistory(string Report, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListReportHistory", new object[] {
                    Report}, callback, asyncState);
    }
    
    /// <remarks/>
    public ReportHistorySnapshot[] EndListReportHistory(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ReportHistorySnapshot[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
"ReportHistorySnapshot", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DeleteReportHistorySnapshot(string Report, string HistoryID) {
        this.Invoke("DeleteReportHistorySnapshot", new object[] {
                    Report,
                    HistoryID});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDeleteReportHistorySnapshot(string Report, string HistoryID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteReportHistorySnapshot", new object[] {
                    Report,
                    HistoryID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteReportHistorySnapshot(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FindIt" +
"ems", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Items")]
    public CatalogItem[] FindItems(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions) {
        object[] results = this.Invoke("FindItems", new object[] {
                    Folder,
                    BooleanOperator,
                    Conditions});
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginFindItems(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindItems", new object[] {
                    Folder,
                    BooleanOperator,
                    Conditions}, callback, asyncState);
    }
    
    /// <remarks/>
    public CatalogItem[] EndFindItems(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("ScheduleID")]
    public string CreateSchedule(string Name, ScheduleDefinition ScheduleDefinition) {
        object[] results = this.Invoke("CreateSchedule", new object[] {
                    Name,
                    ScheduleDefinition});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateSchedule(string Name, ScheduleDefinition ScheduleDefinition, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateSchedule", new object[] {
                    Name,
                    ScheduleDefinition}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateSchedule(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
"Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DeleteSchedule(string ScheduleID) {
        this.Invoke("DeleteSchedule", new object[] {
                    ScheduleID});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDeleteSchedule(string ScheduleID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteSchedule", new object[] {
                    ScheduleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteSchedule(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSch" +
"eduleProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition) {
        this.Invoke("SetScheduleProperties", new object[] {
                    Name,
                    ScheduleID,
                    ScheduleDefinition});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetScheduleProperties", new object[] {
                    Name,
                    ScheduleID,
                    ScheduleDefinition}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetScheduleProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSch" +
"eduleProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Schedule")]
    public Schedule GetScheduleProperties(string ScheduleID) {
        object[] results = this.Invoke("GetScheduleProperties", new object[] {
                    ScheduleID});
        return ((Schedule)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetScheduleProperties(string ScheduleID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScheduleProperties", new object[] {
                    ScheduleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public Schedule EndGetScheduleProperties(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Schedule)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
"heduledReports", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListScheduledReports(string ScheduleID) {
        object[] results = this.Invoke("ListScheduledReports", new object[] {
                    ScheduleID});
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListScheduledReports(string ScheduleID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListScheduledReports", new object[] {
                    ScheduleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CatalogItem[] EndListScheduledReports(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CatalogItem[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
"hedules", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Schedules")]
    public Schedule[] ListSchedules() {
        object[] results = this.Invoke("ListSchedules", new object[0]);
        return ((Schedule[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSchedules(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSchedules", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Schedule[] EndListSchedules(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Schedule[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/PauseS" +
"chedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void PauseSchedule(string ScheduleID) {
        this.Invoke("PauseSchedule", new object[] {
                    ScheduleID});
    }
    
    /// <remarks/>
    public IAsyncResult BeginPauseSchedule(string ScheduleID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PauseSchedule", new object[] {
                    ScheduleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPauseSchedule(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Resume" +
"Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void ResumeSchedule(string ScheduleID) {
        this.Invoke("ResumeSchedule", new object[] {
                    ScheduleID});
    }
    
    /// <remarks/>
    public IAsyncResult BeginResumeSchedule(string ScheduleID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResumeSchedule", new object[] {
                    ScheduleID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndResumeSchedule(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Subscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("SubscriptionID")]
    public string CreateSubscription(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
        object[] results = this.Invoke("CreateSubscription", new object[] {
                    Report,
                    ExtensionSettings,
                    Description,
                    EventType,
                    MatchData,
                    Parameters});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateSubscription(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateSubscription", new object[] {
                    Report,
                    ExtensionSettings,
                    Description,
                    EventType,
                    MatchData,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateSubscription(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"DataDrivenSubscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("SubscriptionID")]
    public string CreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
        object[] results = this.Invoke("CreateDataDrivenSubscription", new object[] {
                    Report,
                    ExtensionSettings,
                    DataRetrievalPlan,
                    Description,
                    EventType,
                    MatchData,
                    Parameters});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateDataDrivenSubscription", new object[] {
                    Report,
                    ExtensionSettings,
                    DataRetrievalPlan,
                    Description,
                    EventType,
                    MatchData,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateDataDrivenSubscription(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSub" +
"scriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
        this.Invoke("SetSubscriptionProperties", new object[] {
                    SubscriptionID,
                    ExtensionSettings,
                    Description,
                    EventType,
                    MatchData,
                    Parameters});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSubscriptionProperties", new object[] {
                    SubscriptionID,
                    ExtensionSettings,
                    Description,
                    EventType,
                    MatchData,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetSubscriptionProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
"aDrivenSubscriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
        this.Invoke("SetDataDrivenSubscriptionProperties", new object[] {
                    DataDrivenSubscriptionID,
                    ExtensionSettings,
                    DataRetrievalPlan,
                    Description,
                    EventType,
                    MatchData,
                    Parameters});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDataDrivenSubscriptionProperties", new object[] {
                    DataDrivenSubscriptionID,
                    ExtensionSettings,
                    DataRetrievalPlan,
                    Description,
                    EventType,
                    MatchData,
                    Parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetDataDrivenSubscriptionProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSub" +
"scriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Owner")]
    public string GetSubscriptionProperties(string SubscriptionID, out ExtensionSettings ExtensionSettings, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValue[] Parameters) {
        object[] results = this.Invoke("GetSubscriptionProperties", new object[] {
                    SubscriptionID});
        ExtensionSettings = ((ExtensionSettings)(results[1]));
        Description = ((string)(results[2]));
        Active = ((ActiveState)(results[3]));
        Status = ((string)(results[4]));
        EventType = ((string)(results[5]));
        MatchData = ((string)(results[6]));
        Parameters = ((ParameterValue[])(results[7]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetSubscriptionProperties(string SubscriptionID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionProperties", new object[] {
                    SubscriptionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetSubscriptionProperties(IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValue[] Parameters) {
        object[] results = this.EndInvoke(asyncResult);
        ExtensionSettings = ((ExtensionSettings)(results[1]));
        Description = ((string)(results[2]));
        Active = ((ActiveState)(results[3]));
        Status = ((string)(results[4]));
        EventType = ((string)(results[5]));
        MatchData = ((string)(results[6]));
        Parameters = ((ParameterValue[])(results[7]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
"aDrivenSubscriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("Owner")]
    public string GetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, out ExtensionSettings ExtensionSettings, out DataRetrievalPlan DataRetrievalPlan, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValueOrFieldReference[] Parameters) {
        object[] results = this.Invoke("GetDataDrivenSubscriptionProperties", new object[] {
                    DataDrivenSubscriptionID});
        ExtensionSettings = ((ExtensionSettings)(results[1]));
        DataRetrievalPlan = ((DataRetrievalPlan)(results[2]));
        Description = ((string)(results[3]));
        Active = ((ActiveState)(results[4]));
        Status = ((string)(results[5]));
        EventType = ((string)(results[6]));
        MatchData = ((string)(results[7]));
        Parameters = ((ParameterValueOrFieldReference[])(results[8]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDataDrivenSubscriptionProperties", new object[] {
                    DataDrivenSubscriptionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetDataDrivenSubscriptionProperties(IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings, out DataRetrievalPlan DataRetrievalPlan, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValueOrFieldReference[] Parameters) {
        object[] results = this.EndInvoke(asyncResult);
        ExtensionSettings = ((ExtensionSettings)(results[1]));
        DataRetrievalPlan = ((DataRetrievalPlan)(results[2]));
        Description = ((string)(results[3]));
        Active = ((ActiveState)(results[4]));
        Status = ((string)(results[5]));
        EventType = ((string)(results[6]));
        MatchData = ((string)(results[7]));
        Parameters = ((ParameterValueOrFieldReference[])(results[8]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
"Subscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DeleteSubscription(string SubscriptionID) {
        this.Invoke("DeleteSubscription", new object[] {
                    SubscriptionID});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDeleteSubscription(string SubscriptionID, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteSubscription", new object[] {
                    SubscriptionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteSubscription(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Prepar" +
"eQuery", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlElement("DataSettings")]
    public DataSetDefinition PrepareQuery(DataSource DataSource, DataSetDefinition DataSet, out bool Changed) {
        object[] results = this.Invoke("PrepareQuery", new object[] {
                    DataSource,
                    DataSet});
        Changed = ((bool)(results[1]));
        return ((DataSetDefinition)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginPrepareQuery(DataSource DataSource, DataSetDefinition DataSet, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PrepareQuery", new object[] {
                    DataSource,
                    DataSet}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataSetDefinition EndPrepareQuery(IAsyncResult asyncResult, out bool Changed) {
        object[] results = this.EndInvoke(asyncResult);
        Changed = ((bool)(results[1]));
        return ((DataSetDefinition)(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExt" +
"ensionSettings", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("ExtensionParameters")]
    public ExtensionParameter[] GetExtensionSettings(string Extension) {
        object[] results = this.Invoke("GetExtensionSettings", new object[] {
                    Extension});
        return ((ExtensionParameter[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetExtensionSettings(string Extension, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetExtensionSettings", new object[] {
                    Extension}, callback, asyncState);
    }
    
    /// <remarks/>
    public ExtensionParameter[] EndGetExtensionSettings(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ExtensionParameter[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Valida" +
"teExtensionSettings", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("ParameterErrors")]
    public ExtensionParameter[] ValidateExtensionSettings(string Extension, ParameterValueOrFieldReference[] ParameterValues) {
        object[] results = this.Invoke("ValidateExtensionSettings", new object[] {
                    Extension,
                    ParameterValues});
        return ((ExtensionParameter[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginValidateExtensionSettings(string Extension, ParameterValueOrFieldReference[] ParameterValues, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateExtensionSettings", new object[] {
                    Extension,
                    ParameterValues}, callback, asyncState);
    }
    
    /// <remarks/>
    public ExtensionParameter[] EndValidateExtensionSettings(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ExtensionParameter[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
"bscriptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("SubscriptionItems")]
    public Subscription[] ListSubscriptions(string Report, string Owner) {
        object[] results = this.Invoke("ListSubscriptions", new object[] {
                    Report,
                    Owner});
        return ((Subscription[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSubscriptions(string Report, string Owner, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSubscriptions", new object[] {
                    Report,
                    Owner}, callback, asyncState);
    }
    
    /// <remarks/>
    public Subscription[] EndListSubscriptions(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Subscription[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
"bscriptionsUsingDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("SubscriptionItems")]
    public Subscription[] ListSubscriptionsUsingDataSource(string DataSource) {
        object[] results = this.Invoke("ListSubscriptionsUsingDataSource", new object[] {
                    DataSource});
        return ((Subscription[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSubscriptionsUsingDataSource(string DataSource, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSubscriptionsUsingDataSource", new object[] {
                    DataSource}, callback, asyncState);
    }
    
    /// <remarks/>
    public Subscription[] EndListSubscriptionsUsingDataSource(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Subscription[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEx" +
"tensions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Extensions")]
    public Extension[] ListExtensions(ExtensionTypeEnum ExtensionType) {
        object[] results = this.Invoke("ListExtensions", new object[] {
                    ExtensionType});
        return ((Extension[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListExtensions(ExtensionTypeEnum ExtensionType, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListExtensions", new object[] {
                    ExtensionType}, callback, asyncState);
    }
    
    /// <remarks/>
    public Extension[] EndListExtensions(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Extension[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEv" +
"ents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Events")]
    public Event[] ListEvents() {
        object[] results = this.Invoke("ListEvents", new object[0]);
        return ((Event[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListEvents(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListEvents", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Event[] EndListEvents(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Event[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FireEv" +
"ent", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void FireEvent(string EventType, string EventData) {
        this.Invoke("FireEvent", new object[] {
                    EventType,
                    EventData});
    }
    
    /// <remarks/>
    public IAsyncResult BeginFireEvent(string EventType, string EventData, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FireEvent", new object[] {
                    EventType,
                    EventData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFireEvent(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
"stemTasks", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] ListSystemTasks() {
        object[] results = this.Invoke("ListSystemTasks", new object[0]);
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSystemTasks(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSystemTasks", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Task[] EndListSystemTasks(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListTa" +
"sks", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] ListTasks() {
        object[] results = this.Invoke("ListTasks", new object[0]);
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListTasks(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListTasks", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Task[] EndListTasks(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
"stemRoles", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Roles")]
    public Role[] ListSystemRoles() {
        object[] results = this.Invoke("ListSystemRoles", new object[0]);
        return ((Role[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListSystemRoles(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListSystemRoles", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Role[] EndListSystemRoles(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Role[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRo" +
"les", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Roles")]
    public Role[] ListRoles() {
        object[] results = this.Invoke("ListRoles", new object[0]);
        return ((Role[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginListRoles(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListRoles", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Role[] EndListRoles(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Role[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
"Role", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void CreateRole(string Name, string Description, Task[] Tasks) {
        this.Invoke("CreateRole", new object[] {
                    Name,
                    Description,
                    Tasks});
    }
    
    /// <remarks/>
    public IAsyncResult BeginCreateRole(string Name, string Description, Task[] Tasks, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateRole", new object[] {
                    Name,
                    Description,
                    Tasks}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateRole(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
"Role", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void DeleteRole(string Name) {
        this.Invoke("DeleteRole", new object[] {
                    Name});
    }
    
    /// <remarks/>
    public IAsyncResult BeginDeleteRole(string Name, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteRole", new object[] {
                    Name}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteRole(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRol" +
"eProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] GetRoleProperties(string Name, out string Description) {
        object[] results = this.Invoke("GetRoleProperties", new object[] {
                    Name});
        Description = ((string)(results[1]));
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetRoleProperties(string Name, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleProperties", new object[] {
                    Name}, callback, asyncState);
    }
    
    /// <remarks/>
    public Task[] EndGetRoleProperties(IAsyncResult asyncResult, out string Description) {
        object[] results = this.EndInvoke(asyncResult);
        Description = ((string)(results[1]));
        return ((Task[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRol" +
"eProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetRoleProperties(string Name, string Description, Task[] Tasks) {
        this.Invoke("SetRoleProperties", new object[] {
                    Name,
                    Description,
                    Tasks});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetRoleProperties(string Name, string Description, Task[] Tasks, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetRoleProperties", new object[] {
                    Name,
                    Description,
                    Tasks}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetRoleProperties(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
"temPolicies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Policies")]
    public Policy[] GetSystemPolicies() {
        object[] results = this.Invoke("GetSystemPolicies", new object[0]);
        return ((Policy[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetSystemPolicies(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemPolicies", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Policy[] EndGetSystemPolicies(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Policy[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
"temPolicies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetSystemPolicies(Policy[] Policies) {
        this.Invoke("SetSystemPolicies", new object[] {
                    Policies});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetSystemPolicies(Policy[] Policies, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemPolicies", new object[] {
                    Policies}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetSystemPolicies(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPol" +
"icies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Policies")]
    public Policy[] GetPolicies(string Item, out bool InheritParent) {
        object[] results = this.Invoke("GetPolicies", new object[] {
                    Item});
        InheritParent = ((bool)(results[1]));
        return ((Policy[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetPolicies(string Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPolicies", new object[] {
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public Policy[] EndGetPolicies(IAsyncResult asyncResult, out bool InheritParent) {
        object[] results = this.EndInvoke(asyncResult);
        InheritParent = ((bool)(results[1]));
        return ((Policy[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPol" +
"icies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void SetPolicies(string Item, Policy[] Policies) {
        this.Invoke("SetPolicies", new object[] {
                    Item,
                    Policies});
    }
    
    /// <remarks/>
    public IAsyncResult BeginSetPolicies(string Item, Policy[] Policies, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPolicies", new object[] {
                    Item,
                    Policies}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetPolicies(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Inheri" +
"tParentSecurity", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void InheritParentSecurity(string Item) {
        this.Invoke("InheritParentSecurity", new object[] {
                    Item});
    }
    
    /// <remarks/>
    public IAsyncResult BeginInheritParentSecurity(string Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InheritParentSecurity", new object[] {
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndInheritParentSecurity(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
"temPermissions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Permissions")]
    [return: XmlArrayItem("Operation")]
    public string[] GetSystemPermissions() {
        object[] results = this.Invoke("GetSystemPermissions", new object[0]);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetSystemPermissions(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemPermissions", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndGetSystemPermissions(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPer" +
"missions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    [return: XmlArray("Permissions")]
    [return: XmlArrayItem("Operation")]
    public string[] GetPermissions(string Item) {
        object[] results = this.Invoke("GetPermissions", new object[] {
                    Item});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetPermissions(string Item, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermissions", new object[] {
                    Item}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndGetPermissions(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/LogonU" +
"ser", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void LogonUser(string userName, string password, string authority) {
        this.Invoke("LogonUser", new object[] {
                    userName,
                    password,
                    authority});
    }
    
    /// <remarks/>
    public IAsyncResult BeginLogonUser(string userName, string password, string authority, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogonUser", new object[] {
                    userName,
                    password,
                    authority}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogonUser(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [SoapHeader("ServerInfoHeaderValue", Direction=SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Logoff" +
"", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
    public void Logoff() {
        this.Invoke("Logoff", new object[0]);
    }
    
    /// <remarks/>
    public IAsyncResult BeginLogoff(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Logoff", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogoff(IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlRoot(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
public class ServerInfoHeader : SoapHeader {
    
    /// <remarks/>
    public string ReportServerVersionNumber;
    
    /// <remarks/>
    public string ReportServerEdition;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Policy {
    
    /// <remarks/>
    public string GroupUserName;
    
    /// <remarks/>
    public Role[] Roles;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Role {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Task {
    
    /// <remarks/>
    public string TaskID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Event {
    
    /// <remarks/>
    public string Type;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Extension {
    
    /// <remarks/>
    public ExtensionTypeEnum ExtensionType;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string LocalizedName;
    
    /// <remarks/>
    public bool Visible;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ExtensionTypeEnum {
    
    /// <remarks/>
    Delivery,
    
    /// <remarks/>
    Render,
    
    /// <remarks/>
    Data,
    
    /// <remarks/>
    All,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Subscription {
    
    /// <remarks/>
    public string SubscriptionID;
    
    /// <remarks/>
    public string Owner;
    
    /// <remarks/>
    public string Path;
    
    /// <remarks/>
    public string VirtualPath;
    
    /// <remarks/>
    public string Report;
    
    /// <remarks/>
    public ExtensionSettings DeliverySettings;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string Status;
    
    /// <remarks/>
    public ActiveState Active;
    
    /// <remarks/>
    public DateTime LastExecuted;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool LastExecutedSpecified;
    
    /// <remarks/>
    public string ModifiedBy;
    
    /// <remarks/>
    public DateTime ModifiedDate;
    
    /// <remarks/>
    public string EventType;
    
    /// <remarks/>
    public bool IsDataDriven;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ExtensionSettings {
    
    /// <remarks/>
    public string Extension;
    
    /// <remarks/>
    [XmlArrayItem(typeof(ParameterValue))]
    [XmlArrayItem(typeof(ParameterFieldReference))]
    public ParameterValueOrFieldReference[] ParameterValues;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ParameterValue : ParameterValueOrFieldReference {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Value;
    
    /// <remarks/>
    public string Label;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(ParameterFieldReference))]
[XmlInclude(typeof(ParameterValue))]
public class ParameterValueOrFieldReference {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ParameterFieldReference : ParameterValueOrFieldReference {
    
    /// <remarks/>
    public string ParameterName;
    
    /// <remarks/>
    public string FieldAlias;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ActiveState {
    
    /// <remarks/>
    public bool DeliveryExtensionRemoved;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool DeliveryExtensionRemovedSpecified;
    
    /// <remarks/>
    public bool SharedDataSourceRemoved;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool SharedDataSourceRemovedSpecified;
    
    /// <remarks/>
    public bool MissingParameterValue;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool MissingParameterValueSpecified;
    
    /// <remarks/>
    public bool InvalidParameterValue;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool InvalidParameterValueSpecified;
    
    /// <remarks/>
    public bool UnknownReportParameter;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool UnknownReportParameterSpecified;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ExtensionParameter {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string DisplayName;
    
    /// <remarks/>
    public bool Required;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool RequiredSpecified;
    
    /// <remarks/>
    public bool ReadOnly;
    
    /// <remarks/>
    public string Value;
    
    /// <remarks/>
    public string Error;
    
    /// <remarks/>
    public bool Encrypted;
    
    /// <remarks/>
    public bool IsPassword;
    
    /// <remarks/>
    [XmlArrayItem("Value")]
    public ValidValue[] ValidValues;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ValidValue {
    
    /// <remarks/>
    public string Label;
    
    /// <remarks/>
    public string Value;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class QueryDefinition {
    
    /// <remarks/>
    public string CommandType;
    
    /// <remarks/>
    public string CommandText;
    
    /// <remarks/>
    public int Timeout;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool TimeoutSpecified;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Field {
    
    /// <remarks/>
    public string Alias;
    
    /// <remarks/>
    public string Name;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSetDefinition {
    
    /// <remarks/>
    public Field[] Fields;
    
    /// <remarks/>
    public QueryDefinition Query;
    
    /// <remarks/>
    public SensitivityEnum CaseSensitivity;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool CaseSensitivitySpecified;
    
    /// <remarks/>
    public string Collation;
    
    /// <remarks/>
    public SensitivityEnum AccentSensitivity;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool AccentSensitivitySpecified;
    
    /// <remarks/>
    public SensitivityEnum KanatypeSensitivity;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool KanatypeSensitivitySpecified;
    
    /// <remarks/>
    public SensitivityEnum WidthSensitivity;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool WidthSensitivitySpecified;
    
    /// <remarks/>
    public string Name;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum SensitivityEnum {
    
    /// <remarks/>
    True,
    
    /// <remarks/>
    False,
    
    /// <remarks/>
    Auto,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataRetrievalPlan {
    
    /// <remarks/>
    [XmlElement("InvalidDataSourceReference", typeof(InvalidDataSourceReference))]
    [XmlElement("DataSourceReference", typeof(DataSourceReference))]
    [XmlElement("DataSourceDefinition", typeof(DataSourceDefinition))]
    public DataSourceDefinitionOrReference Item;
    
    /// <remarks/>
    public DataSetDefinition DataSet;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class InvalidDataSourceReference : DataSourceDefinitionOrReference {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(DataSourceReference))]
[XmlInclude(typeof(InvalidDataSourceReference))]
[XmlInclude(typeof(DataSourceDefinition))]
public class DataSourceDefinitionOrReference {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSourceReference : DataSourceDefinitionOrReference {
    
    /// <remarks/>
    public string Reference;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSourceDefinition : DataSourceDefinitionOrReference {
    
    /// <remarks/>
    public string Extension;
    
    /// <remarks/>
    public string ConnectString;
    
    /// <remarks/>
    public CredentialRetrievalEnum CredentialRetrieval;
    
    /// <remarks/>
    public bool WindowsCredentials;
    
    /// <remarks/>
    public bool ImpersonateUser;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool ImpersonateUserSpecified;
    
    /// <remarks/>
    public string Prompt;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string Password;
    
    /// <remarks/>
    public bool Enabled;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool EnabledSpecified;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum CredentialRetrievalEnum {
    
    /// <remarks/>
    Prompt,
    
    /// <remarks/>
    Store,
    
    /// <remarks/>
    Integrated,
    
    /// <remarks/>
    None,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Schedule {
    
    /// <remarks/>
    public string ScheduleID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public ScheduleDefinition Definition;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string Creator;
    
    /// <remarks/>
    public DateTime NextRunTime;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool NextRunTimeSpecified;
    
    /// <remarks/>
    public DateTime LastRunTime;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool LastRunTimeSpecified;
    
    /// <remarks/>
    public bool ReferencesPresent;
    
    /// <remarks/>
    public ScheduleStateEnum State;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ScheduleDefinition : ScheduleDefinitionOrReference {
    
    /// <remarks/>
    public DateTime StartDateTime;
    
    /// <remarks/>
    public DateTime EndDate;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool EndDateSpecified;
    
    /// <remarks/>
    [XmlElement("MinuteRecurrence", typeof(MinuteRecurrence))]
    [XmlElement("MonthlyRecurrence", typeof(MonthlyRecurrence))]
    [XmlElement("WeeklyRecurrence", typeof(WeeklyRecurrence))]
    [XmlElement("MonthlyDOWRecurrence", typeof(MonthlyDOWRecurrence))]
    [XmlElement("DailyRecurrence", typeof(DailyRecurrence))]
    public RecurrencePattern Item;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class MinuteRecurrence : RecurrencePattern {
    
    /// <remarks/>
    public int MinutesInterval;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(WeeklyRecurrence))]
[XmlInclude(typeof(MinuteRecurrence))]
[XmlInclude(typeof(DailyRecurrence))]
[XmlInclude(typeof(MonthlyRecurrence))]
[XmlInclude(typeof(MonthlyDOWRecurrence))]
public class RecurrencePattern {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class WeeklyRecurrence : RecurrencePattern {
    
    /// <remarks/>
    public int WeeksInterval;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool WeeksIntervalSpecified;
    
    /// <remarks/>
    public DaysOfWeekSelector DaysOfWeek;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DaysOfWeekSelector {
    
    /// <remarks/>
    public bool Sunday;
    
    /// <remarks/>
    public bool Monday;
    
    /// <remarks/>
    public bool Tuesday;
    
    /// <remarks/>
    public bool Wednesday;
    
    /// <remarks/>
    public bool Thursday;
    
    /// <remarks/>
    public bool Friday;
    
    /// <remarks/>
    public bool Saturday;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DailyRecurrence : RecurrencePattern {
    
    /// <remarks/>
    public int DaysInterval;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class MonthlyRecurrence : RecurrencePattern {
    
    /// <remarks/>
    public string Days;
    
    /// <remarks/>
    public MonthsOfYearSelector MonthsOfYear;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class MonthsOfYearSelector {
    
    /// <remarks/>
    public bool January;
    
    /// <remarks/>
    public bool February;
    
    /// <remarks/>
    public bool March;
    
    /// <remarks/>
    public bool April;
    
    /// <remarks/>
    public bool May;
    
    /// <remarks/>
    public bool June;
    
    /// <remarks/>
    public bool July;
    
    /// <remarks/>
    public bool August;
    
    /// <remarks/>
    public bool September;
    
    /// <remarks/>
    public bool October;
    
    /// <remarks/>
    public bool November;
    
    /// <remarks/>
    public bool December;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class MonthlyDOWRecurrence : RecurrencePattern {
    
    /// <remarks/>
    public WeekNumberEnum WhichWeek;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool WhichWeekSpecified;
    
    /// <remarks/>
    public DaysOfWeekSelector DaysOfWeek;
    
    /// <remarks/>
    public MonthsOfYearSelector MonthsOfYear;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum WeekNumberEnum {
    
    /// <remarks/>
    FirstWeek,
    
    /// <remarks/>
    SecondWeek,
    
    /// <remarks/>
    ThirdWeek,
    
    /// <remarks/>
    FourthWeek,
    
    /// <remarks/>
    LastWeek,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(ScheduleDefinition))]
[XmlInclude(typeof(ScheduleReference))]
[XmlInclude(typeof(NoSchedule))]
public class ScheduleDefinitionOrReference {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ScheduleReference : ScheduleDefinitionOrReference {
    
    /// <remarks/>
    public string ScheduleID;
    
    /// <remarks/>
    public ScheduleDefinition Definition;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class NoSchedule : ScheduleDefinitionOrReference {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ScheduleStateEnum {
    
    /// <remarks/>
    Ready,
    
    /// <remarks/>
    Running,
    
    /// <remarks/>
    Paused,
    
    /// <remarks/>
    Expired,
    
    /// <remarks/>
    Failing,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ReportHistorySnapshot {
    
    /// <remarks/>
    public string HistoryID;
    
    /// <remarks/>
    public DateTime CreationDate;
    
    /// <remarks/>
    public int Size;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSourcePrompt {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string DataSourceID;
    
    /// <remarks/>
    public string Prompt;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSource {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    [XmlElement("InvalidDataSourceReference", typeof(InvalidDataSourceReference))]
    [XmlElement("DataSourceReference", typeof(DataSourceReference))]
    [XmlElement("DataSourceDefinition", typeof(DataSourceDefinition))]
    public DataSourceDefinitionOrReference Item;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Job {
    
    /// <remarks/>
    public string JobID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Path;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string Machine;
    
    /// <remarks/>
    public string User;
    
    /// <remarks/>
    public DateTime StartDateTime;
    
    /// <remarks/>
    public JobActionEnum Action;
    
    /// <remarks/>
    public JobTypeEnum Type;
    
    /// <remarks/>
    public JobStatusEnum Status;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum JobActionEnum {
    
    /// <remarks/>
    Render,
    
    /// <remarks/>
    SnapshotCreation,
    
    /// <remarks/>
    ReportHistoryCreation,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum JobTypeEnum {
    
    /// <remarks/>
    User,
    
    /// <remarks/>
    System,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum JobStatusEnum {
    
    /// <remarks/>
    New,
    
    /// <remarks/>
    Running,
    
    /// <remarks/>
    CancelRequested,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(TimeExpiration))]
[XmlInclude(typeof(ScheduleExpiration))]
public class ExpirationDefinition {
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class TimeExpiration : ExpirationDefinition {
    
    /// <remarks/>
    public int Minutes;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ScheduleExpiration : ExpirationDefinition {
    
    /// <remarks/>
    [XmlElement("ScheduleReference", typeof(ScheduleReference))]
    [XmlElement("ScheduleDefinition", typeof(ScheduleDefinition))]
    public ScheduleDefinitionOrReference Item;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class ReportParameter {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public ParameterTypeEnum Type;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool TypeSpecified;
    
    /// <remarks/>
    public bool Nullable;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool NullableSpecified;
    
    /// <remarks/>
    public bool AllowBlank;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool AllowBlankSpecified;
    
    /// <remarks/>
    public bool MultiValue;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool MultiValueSpecified;
    
    /// <remarks/>
    public bool QueryParameter;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool QueryParameterSpecified;
    
    /// <remarks/>
    public string Prompt;
    
    /// <remarks/>
    public bool PromptUser;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool PromptUserSpecified;
    
    /// <remarks/>
    [XmlArrayItem("Dependency")]
    public string[] Dependencies;
    
    /// <remarks/>
    public bool ValidValuesQueryBased;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool ValidValuesQueryBasedSpecified;
    
    /// <remarks/>
    public ValidValue[] ValidValues;
    
    /// <remarks/>
    public bool DefaultValuesQueryBased;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool DefaultValuesQueryBasedSpecified;
    
    /// <remarks/>
    [XmlArrayItem("Value")]
    public string[] DefaultValues;
    
    /// <remarks/>
    public ParameterStateEnum State;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool StateSpecified;
    
    /// <remarks/>
    public string ErrorMessage;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ParameterTypeEnum {
    
    /// <remarks/>
    Boolean,
    
    /// <remarks/>
    DateTime,
    
    /// <remarks/>
    Integer,
    
    /// <remarks/>
    Float,
    
    /// <remarks/>
    String,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ParameterStateEnum {
    
    /// <remarks/>
    HasValidValue,
    
    /// <remarks/>
    MissingValidValue,
    
    /// <remarks/>
    HasOutstandingDependencies,
    
    /// <remarks/>
    DynamicValuesUnavailable,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class DataSourceCredentials {
    
    /// <remarks/>
    public string DataSourceName;
    
    /// <remarks/>
    public string UserName;
    
    /// <remarks/>
    public string Password;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class Warning {
    
    /// <remarks/>
    public string Code;
    
    /// <remarks/>
    public string Severity;
    
    /// <remarks/>
    public string ObjectName;
    
    /// <remarks/>
    public string ObjectType;
    
    /// <remarks/>
    public string Message;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class CatalogItem {
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Path;
    
    /// <remarks/>
    public string VirtualPath;
    
    /// <remarks/>
    public ItemTypeEnum Type;
    
    /// <remarks/>
    public int Size;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool SizeSpecified;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public bool Hidden;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool HiddenSpecified;
    
    /// <remarks/>
    public DateTime CreationDate;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool CreationDateSpecified;
    
    /// <remarks/>
    public DateTime ModifiedDate;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool ModifiedDateSpecified;
    
    /// <remarks/>
    public string CreatedBy;
    
    /// <remarks/>
    public string ModifiedBy;
    
    /// <remarks/>
    public string MimeType;
    
    /// <remarks/>
    public DateTime ExecutionDate;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool ExecutionDateSpecified;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ItemTypeEnum {
    
    /// <remarks/>
    Unknown,
    
    /// <remarks/>
    Folder,
    
    /// <remarks/>
    Report,
    
    /// <remarks/>
    Resource,
    
    /// <remarks/>
    LinkedReport,
    
    /// <remarks/>
    DataSource,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlInclude(typeof(SearchCondition))]
public class Property {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Value;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public class SearchCondition : Property {
    
    /// <remarks/>
    public ConditionEnum Condition;
    
    /// <remarks/>
    [XmlIgnore()]
    public bool ConditionSpecified;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ConditionEnum {
    
    /// <remarks/>
    Contains,
    
    /// <remarks/>
    Equals,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlRoot(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
public class BatchHeader : SoapHeader {
    
    /// <remarks/>
    public string BatchID;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlRoot(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
public class SessionHeader : SoapHeader {
    
    /// <remarks/>
    public string SessionId;
    
    /// <remarks/>
    public bool IsNewExecution;
    
    /// <remarks/>
    public string ExecutionDateTime;
    
    /// <remarks/>
    public string ExpirationDateTime;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
[XmlRoot(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
public class ItemNamespaceHeader : SoapHeader {
    
    /// <remarks/>
    public ItemNamespaceEnum ItemNamespace;
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ItemNamespaceEnum {
    
    /// <remarks/>
    PathBased,
    
    /// <remarks/>
    GUIDBased,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum ExecutionSettingEnum {
    
    /// <remarks/>
    Live,
    
    /// <remarks/>
    Snapshot,
}

/// <remarks/>
[XmlType(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
public enum BooleanOperatorEnum {
    
    /// <remarks/>
    And,
    
    /// <remarks/>
    Or,
}
